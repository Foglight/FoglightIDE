<?xml version="1.0" encoding="utf-8"?>
<foglight-config exported-on="2010-06-08T20:03:26.58Z"
	version="1.0.3.0">
	<persistable-script name="fglide_getCartridgeStateDir">
		<signature>
			<arg name="name" optional="false">
				<description><![CDATA[Name of the Cartride]]></description>
			</arg>
		</signature>
		<body><![CDATA[
def name = args[1]
def cars = server.CartridgeService.getAllCartridges()

car = cars.find{it.name == name && it.cartridgeStatus.name() == "ACTIVATED"}
File f = new File(".")
f = new File(f,"state")
f = new File(f,"cartridge.exploded")
f = new File (f,name+"-"+car.version.replace(".","_"))
]]>
		</body>
	</persistable-script>

	<persistable-script name="exportCartridgeContent">
		<signature>


			<arg name="name" type="java.lang.String">
				<description><![CDATA[Name of the created Container]]></description>
			</arg>


			<arg name="file" type="java.io.OutputStream">
				<description><![CDATA[Filename (ZIP Format)]]></description>
			</arg>
			<arg name="version" optional="true">
				<description><![CDATA[Version]]></description>
			</arg>



		</signature>


		<documentation>
			<description>Exports the Cartridge contents as Zip File (used to
				update Cartridge Projects)</description>
		</documentation>

		<annotation name="cmdlet">
			<attribute name="name">
				<value>fglide:exportCartridgeContent</value>
			</attribute>
		</annotation>

		<annotation name="access">
			<attribute name="requiredRoles">
				<value>Administrator</value>
			</attribute>
		</annotation>


		<body><![CDATA[
		def version = args[3]
		if (version == null) version = "1.0.0"
		def car = #!IDE_CAR_ExportContainer#.topologyObjects.find{it.name == args[1]}


def msg = new StringBuffer()
def carBuild = ["task":new StringBuffer(),
                 "prepare":new StringBuffer(),
                 "additional":new StringBuffer()]
// Imports
import org.apache.commons.io.FileUtils;
import com.quest.nitro.service.cartridge.api.*


File tmpDir = new File(System.getProperty("java.io.tmpdir") + 
		File.separator + car.getString("name") + 
		"_tmp_"	+ System.currentTimeMillis());
if (tmpDir.exists()) {
	FileUtils.forceDelete(tmpDir);
}
tmpDir.mkdirs();

msg.append("Exporting to Cartridge !!! (tmp:"+tmpDir+"\n----------------------\n");

msg.append("Cartidge Name :"+car.getString("name")+"\nVersion: "+version+"\n");


// call all closures
car.definitionGroups.expToProject.findAll {it != null}.each{ cl->
cl.call(tmpDir,carBuild,version,msg) }



// Add Buildxml File

def buildFile = new File(tmpDir,"src")
buildFile = new File(buildFile,"build")
buildFile.mkdirs()
buildFile = new File(buildFile,"build_content.xml")

msg.append("\n--- Writing build.xml file.\n");
buildFile.withWriter{  wr->
wr << '''<?xml version="1.0" encoding="UTF-8"?>


<project name="SubBuild_generated" basedir="../../"  >
	<target name="_car" depends="_prepare">
		<!-- car may take append="true" and it will put multiple cartridges in to one car file -->
		<car destdir="${dist.dir}" final="false">
			<cartridge name="${cartridge.name}" version="${cartridge.version}"
 buildId="${build.id}" author="${cartridge.author}" foglightversion="5.0" type="user">
				

'''
wr << carBuild["task"]

car.dependencies.each{
//				<dependency name="fglIconset" version="2.0.0" match="SIMILAR" />

String dep = "<${it.get("type/name")} name='${it.getString("carName")}' version='${it.getString("version")}' match='${it.getString("MatchType/name")}'/>\n" 

wr << dep  
}
wr << '''
			</cartridge>
		</car>
	</target>

	<target name="_prepare">
'''
wr << carBuild["prepare"]
wr << '''
	</target>
'''
wr << carBuild["additional"]
wr << '''
</project>
'''
}

		createZipTool().zipDirectory (tmpDir.absolutePath,args[2])
		return msg
]]></body>
	</persistable-script>
	<persistable-script name="exportCartridgeProject">
		<signature>


			<arg name="name" type="java.lang.String">
				<description><![CDATA[Name of the created Container]]></description>
			</arg>


			<arg name="file" type="java.io.OutputStream">
				<description><![CDATA[Filename (ZIP Format)]]></description>
			</arg>
			<arg name="version" optional="true">
				<description><![CDATA[Version to Export]]></description>
			</arg>



		</signature>


		<documentation>
			<description>Exports the Cartridge contents as Project File
			</description>
		</documentation>

		<annotation name="cmdlet">
			<attribute name="name">
				<value>fglide:exportCartridgeProject</value>
			</attribute>
		</annotation>

		<annotation name="access">
			<attribute name="requiredRoles">
				<value>Administrator</value>
			</attribute>
		</annotation>


		<body><![CDATA[
		def version = args[3]
		if (version == null) version = "1.0.0"
		def car = #!IDE_CAR_ExportContainer#.topologyObjects.find{it.name == args[1]}


def msg = new StringBuffer()
def carBuild = ["task":new StringBuffer(),
                 "prepare":new StringBuffer(),
                 "additional":new StringBuffer()]

// Imports
import org.apache.commons.io.FileUtils;
import com.quest.nitro.service.cartridge.api.*


File tmpDir = new File(System.getProperty("java.io.tmpdir") + 
		File.separator + car.getString("name") + 
		"_tmp_"	+ System.currentTimeMillis());
if (tmpDir.exists()) {
	FileUtils.forceDelete(tmpDir);
}
tmpDir.mkdirs();

msg.append("Exporting to Cartridge !!! (tmp:"+tmpDir+"\n----------------------\n");

msg.append("Cartidge Name :"+car.getString("name")+"\nVersion: "+version+"\n");


// call all closures
car.definitionGroups.expToProject.findAll {it != null}.each{ cl->
cl.call(tmpDir,carBuild,version,msg) }


// enrich with Template
def ZT = createZipTool() 
def templateFile = fglide_getCartridgeStateDir("fglIDE-export")
templateFile = new File(templateFile,"Templates-5_5_5_2")// TD need to fix or change on version change
templateFile = new File(templateFile,"ProjectTemplate.zip")
ZT.unzip(templateFile,tmpDir)

def props = new Properties()
def propFile = new File(tmpDir,"configuration.properties")
propFile.withInputStream{  props.load(it)}
props["cartridge.name"] = car.getString("name")
props["cartridge.version"] = version
props["cartridge.author"] = car.getString("author")
props["foglight.server"] =server.HaMembershipService.getPrimaryServerHostName() 
props["foglight.port"] = server.HaMembershipService.getPrimaryServerSystemConfig("foglight.http.port") 

msg.append("--- Properties changed.");

propFile.withOutputStream{  props.store(it,"Modified by FGLIDE")}

// Add Buildxml File

def buildFile = new File(tmpDir,"src")
buildFile = new File(buildFile,"build")
buildFile.mkdirs()
buildFile = new File(buildFile,"build_content.xml")

msg.append("\n--- Writing build.xml file.\n");
buildFile.withWriter{  wr->
wr << '''<?xml version="1.0" encoding="UTF-8"?>


<project name="SubBuild_generated" basedir="../../"  >
	<target name="_car" depends="_prepare">
		<!-- car may take append="true" and it will put multiple cartridges in to one car file -->
		<car destdir="${dist.dir}" final="false">
			<cartridge name="${cartridge.name}" version="${cartridge.version}"
 buildId="${build.id}" author="${cartridge.author}" foglightversion="5.0" type="user">
				

'''
wr << carBuild["task"]

car.dependencies.each{
//				<dependency name="fglIconset" version="2.0.0" match="SIMILAR" />

String dep = "<${it.get("type/name")} name='${it.getString("carName")}' version='${it.getString("version")}' match='${it.getString("MatchType/name")}'/>\n" 

wr << dep  
}
wr << '''
			</cartridge>
		</car>
	</target>

	<target name="_prepare">
'''
wr << carBuild["prepare"]
wr << '''
	</target>
'''
wr << carBuild["additional"]
wr << '''
</project>
'''
}

		ZT.zipDirectory (tmpDir.absolutePath,args[2],args[1])
		return msg
]]></body>
	</persistable-script>

	<persistable-script name="fglide_importTopologyData">
		<signature>
			<arg name="xml" optional="false" type="String">
				<description><![CDATA[XMl File]]></description>
			</arg>
		</signature>
		<documentation>
			<description>Import the Topology data which is stored in the XML file</description>
		</documentation>




		<body><![CDATA[
def xml = args[1]
xmlData = new XmlSlurper().parseText(xml)

def objs = new HashMap()
def createObject = null
def ts = server.TopologyService
def  typesNotFound = new HashMap() // will hold all missing types !!!

createObject = {n->
   println "Creating Object of Type ${n.attributes().type} [${n.attributes().id}]"
  def oType = null
   try { 
   		oType = ts.getType(n.attributes().type)
   } catch (Throwable t){}
   
   //no type
   if (oType==null) {
      // Type missing. Skip and log
      typesNotFound[n.attributes().type]=typesNotFound[n.attributes().type]==null?1:typesNotFound[n.attributes().type]+1
      return null;
   }
   def obj = ts.getObjectShell(oType)
   objs[n.attributes().id] = obj
   
   n.stringProperty.each{p->
     obj.setString(p.attributes().name,p.text())
   }
   
   n.property.each{p->
     obj.setString(p.attributes().name,p.attributes().value)
   }
   

   n.objectProperty.each{ p->
   
   def pname = p.attributes().name
   def tmp = p.objectInstance.collect(createObject)
   tmp += p.objectReference.collect{ r->
           println "Looking up Reference with ID ${r.attributes().refId}" 
           return objs[r.attributes().refId]
   }

   if (obj.type.getProperty(pname).isMany()) {
           obj.getList(pname).addAll(tmp)
        }
        else obj.set(p.attributes().name,tmp[0])
     }
   
   
   
   return obj
   
}

xmlData.objectInstance.each(createObject)

println "Merge Data"
def result = "Result:\n"
result += ts.mergeData(objs.values() as List).join("\n")+"\n\nMissing Types (Objects are not created for those missing Types):\n"
result += typesNotFound.collect{it.key+"  : "+it.value}.join("\n")
return result

		]]></body>
	</persistable-script>

	<persistable-script name="fglide_exportTopologyData">
		<signature>
			<arg name="query" optional="false">
				<description><![CDATA[a TopologyQuery which lists the base Objects.]]></description>
			</arg>
			<arg name="includeContainments" optional="false" type="Boolean">
				<description><![CDATA[Description]]></description>
			</arg>

			<arg name="type" optional="false">

				<description><![CDATA[Type to export]]></description>
				<annotation name="list_mode">
					<value>list</value>
				</annotation>
			</arg>
			<arg name="file" type="java.io.OutputStream" optional="true">
				<description><![CDATA[Filename (ZIP Format)]]></description>
			</arg>


		</signature>
		<documentation>
			<description>Exports a Topology Structure</description>
		</documentation>







		<body><![CDATA[
	
	def writer = (args[4] == null ) ?null:args[4].withWriter{return it}
	def typeNamesToInclude = args[3]
	def includeContainments = (args[2].toLowerCase() == "true" || args[2].toLowerCase() == "yes")
	
	if (writer == null) writer = new StringWriter()
	
	
	def objs
	if (args[1] instanceof String) 	objs  = server.QueryService.queryTopologyObjects(args[1])
	else objs = args[1]


import groovy.xml.MarkupBuilder
import groovy.xml.StreamingMarkupBuilder
com.quest.foglight.exportTools.XMLConstants
def xml = new MarkupBuilder(writer)
//def xml =  new StreamingMarkupBuilder(encoding: 'utf-8')

// closures


def filterArtificialProps = { artProp-> 
   

       try {
        if (artProp.annotations.name.contains( "DerivationExpression")) return false
        if (artProp.annotations.name.contains( "Internal")) return false
        if (["domainAssociationIDs","uniqueId"].contains (artProp.name)) return false
return true
} catch (Exception ex) {
return false
}
}

def filterObservations = {!server.TopologyService.getType("Observation").isAssignableFrom( it.topologyType)}
def findContainments = {it.containment}


// Exp Object Closure (called recursive
//++++++++++++++++++++++++++++++++++++++
// forward Declarations
def exportObject = null
def exportProperty = null
def exportContainment = null

def objCount = -1
def objMap = new HashMap()
def topologyType = server.TopologyService.getType("TopologyObject")
def typesToInclude = typeNamesToInclude.collect{server.TopologyService.getType(it)}



exportObject = { obj,shouldIncludeContainments ->
	// find ref ID
	def localObjectId = 0
	def exists = false
        if (!objMap.containsKey(obj.uniqueId)) {
        	localObjectId = objMap[obj.uniqueId] = (++objCount)
        	exists = false
        }  else {
        	exists = true 
        	localObjectId = objMap[obj.uniqueId]
        }
        
        if (exists ) {
        	xml.objectReference (refId:localObjectId)
        	return
        }
        
        // full export, new Object
        xml.objectInstance(type:obj.topologyTypeName,id:localObjectId,''){
        	
        	
        	def props = obj.topologyType.properties.findAll(filterArtificialProps)
        		.findAll {prop->
        			if (prop.isMany && obj.getList(prop).isEmpty()) return false
        			return obj.get(prop) != null
        		}


        	def containments = props.findAll(findContainments)
        	
        	props = props - containments

        	props.findAll{it.isIdentity()}.each{ exportProperty.call(obj,it,shouldIncludeContainments)}

        	if (typesToInclude.find{type->type.isAssignableFrom(obj.topologyType)}!= null) {
        		props.findAll{!it.isIdentity()}.each{ exportProperty.call(obj,it,shouldIncludeContainments)}
        	
        		// Containments
        		if (!containments.isEmpty() ){
        			if (shouldIncludeContainments) {
        			
        				containments.each{ containment -> exportProperty.call(obj,containment,shouldIncludeContainments)}
        			} else {
        				containments.each{ containment -> exportContainment.call(obj,containment,shouldIncludeContainments)}
        			
        			}
        		}
        		
        	} 
        	
        	 
        	
        }
        	
}

exportProperty = {obj, prop ,shouldIncludeContainments->
	def type = prop.valueType
	if (topologyType.isAssignableFrom(type)) {
		xml.objectProperty(name:prop.name,'') {
			if (prop.isMany()) obj.getList(prop).each{ exportObject.call(it,shouldIncludeContainments) }
			else [obj.get(prop)].each{ exportObject.call(it,shouldIncludeContainments) }
		}
	} else {
		try {
		if (prop.valueType.name == "String") {
xml.stringProperty(name:prop.name,"xml:space":"preserve",obj.getString(prop))

		}
} catch (Exception ex) {
}
		/*
		if (prop.valueType.name == "String") {
			xml.stringProperty(name:prop.name,"xml:space":"preserve",obj.getString(prop)){
				// use encoding
				//writer  << "<!["<<"CDATA"<<"[" <<obj.getString(prop)<<"]"<<"]>"
			}
		}
		*//* else {
			xml.property(name:prop.name,value:obj.getString(prop))
		}*/
	}
}

// only used in containments
exportContainment = {obj, prop ,shouldIncludeContainments->
	def type = prop.valueType
	
	if (topologyType.isAssignableFrom(type)) {
		xml.objectProperty(name:prop.name,'') {
			if (prop.isMany()) {
				obj.getList(prop).findAll{containmentObj->
					
					// on containments we will only list Objects that are export Types !!
					def checkResult = typesToInclude.find{includeType->includeType.isAssignableFrom(containmentObj.topologyType)}!= null
					
					
					
					return checkResult
					
				}.each{ 
					exportObject.call(it,shouldIncludeContainments)
				}
			}
			else return; // containments will allways be many !!!
		}
	} else {
return ; // only Objects allowed
	}
}


// MAIN
xml.topologyExport(version:"1.0.0") {
	objs.each{ exportObject.call(it,includeContainments) }
}
//writer.write(xml.toString())
return (writer instanceof StringWriter)?writer.toString():objCount
		]]></body>
	</persistable-script>

	<persistable-script name="fglide_exportDataCmdlet">
		<signature>
			<arg name="query" optional="false">
				<description><![CDATA[a TopologyQuery which lists the base Objects.]]></description>
			</arg>
			<arg name="includeContainments" optional="false" type="Boolean">
				<description><![CDATA[Description]]></description>
			</arg>
			<arg name="type" optional="false">

				<description><![CDATA[Type to export]]></description>
				<annotation name="list_mode">
					<value>list</value>
				</annotation>
			</arg>
			<arg name="file" type="java.io.OutputStream">
				<description><![CDATA[Filename (ZIP Format)]]></description>
			</arg>
			<arg name="format" optional="true">
				<description><![CDATA[Filename (ZIP Format)]]></description>
			</arg>
		</signature>
		<documentation>
			<description>The export data command will export any TopologyData as xml file 
			or groovy Script. It can be used to export/Import 
			service structures or a List of Hosts or any other Information that
			needs to be replicated on a different FMS.</description>
		</documentation>

		<annotation name="cmdlet">
			<attribute name="name">
				<value>fglide:exportTopology</value>
			</attribute>
		</annotation>

		<annotation name="access">
			<attribute name="requiredRoles">
				<!--
					Please enter the roles required for this Script role1,role2,role3
				-->
				<value>Administrator</value>
			</attribute>
		</annotation>



		<body><![CDATA[
	def erg = fglide_exportTopologyData(args[1],args[2],args[3])
	
	def fmt = (args[5] != null)?args[5]:"xml"
	
	if (fmt == "xml") {
		args[4].withWriter{it << erg}
		return "Data Exported as XML File!!!"
	}
	 
	if (fmt == "groovy") {
		args[4].withWriter{
		// need this hack to prevent query parsing errors
		it << "def hC='#'\n"
		it << "def quotes=\"'''\"\n"
        // replacing in the String
        erg = erg.replace("#","'''+hC+'''")
		erg = erg.replace("'''","'''+quotes+'''")
		
		it << "def xml = '''\\\n"
		int i = 0;
erg.split("\n").each { line-> 
   it << line + "\n"

//
// Split every 100 lines to avoid the Class constant pool limit for String Literals
//##################################################################################

   i++
   if (i%100 == 99) {
   it << "'''\n"
   it << "xml += '''" 
   }
}
		it << "'''"
		it << '''


xmlData = new XmlSlurper().parseText(xml)

def objs = new HashMap()
def createObject = null
def ts = server.TopologyService
def  typesNotFound = new HashMap() // will hold all missing types !!!

createObject = {n->
   println "Creating Object of Type ${n.attributes().type} [${n.attributes().id}]"
   def oType = null
   try { 
   		oType = ts.getType(n.attributes().type)
   } catch (Throwable t){}
   
   //no type
   if (oType==null) {
      // Type missing. Skip and log
      typesNotFound[n.attributes().type]=typesNotFound[n.attributes().type]==null?1:typesNotFound[n.attributes().type]+1
      return null;
   }
   def obj = ts.getObjectShell(oType)
   objs[n.attributes().id] = obj
   
   n.stringProperty.each{p->
     obj.setString(p.attributes().name,p.text())
   }
   
   n.property.each{p->
     obj.setString(p.attributes().name,p.attributes().value)
   }
   

   n.objectProperty.each{ p->
   
   def pname = p.attributes().name
   def tmp = p.objectInstance.collect(createObject)
   tmp += p.objectReference.collect{ r->
           println "Looking up Reference with ID ${r.attributes().refId}" 
           return objs[r.attributes().refId]
   }

   if (obj.type.getProperty(pname).isMany()) {
           obj.getList(pname).addAll(tmp)
        }
        else obj.set(p.attributes().name,tmp[0])
     }
   
   
   
   return obj
   
}

xmlData.objectInstance.each(createObject)

def result = "Result:\\n"
result += ts.mergeData(objs.values() as List).join("\\n")+"\\n\\nMissing Types (Objects are not created for those missing Types):\\n"
result += typesNotFound.collect{it.key+"  : "+it.value}.join("\\n")
return result
'''
}
		return "Data Exported as Groovy Code !!!"
	}
	
	
		]]></body>
	</persistable-script>

	<persistable-script name="fglide_ImportDataCmd">
		<signature>
			<arg name="file" type="java.io.InputStream">
				<description><![CDATA[XML Formated Data Export]]></description>
			</arg>


		</signature>
		<documentation>
			<description>Use to import data that has been exported using the XML format previously.</description>
		</documentation>

		<annotation name="cmdlet">
			<attribute name="name">
				<value>fglide:importTopology</value>
			</attribute>
		</annotation>

		<annotation name="access">
			<attribute name="requiredRoles">
				<!--
					Please enter the roles required for this Script role1,role2,role3
				-->
				<value>Administrator</value>
			</attribute>
		</annotation>



		<body><![CDATA[
		def xml = args[1].withReader{it.text}
        def results = fglide_importTopologyData(xml)
    		return results
		
		]]></body>
	</persistable-script>

	<persistable-script name="fglide_SaveProject">
		<signature>
			<arg name="name" optional="false">
				<description><![CDATA[The Name of the Container]]></description>
			</arg>
			<arg name="file" type="java.io.OutputStream">
	<description><![CDATA[XML File where the Cartridge Container Definition will be saved to.]]></description>
</arg>


		</signature>
		<documentation>
			<description>Save a Cartridge Container Definition</description>
		</documentation>

		<annotation name="cmdlet">
			<attribute name="name">
				<value>fglide:save</value>
			</attribute>
		</annotation>

		<annotation name="access">
			<attribute name="requiredRoles">
				<value>Administrator</value>
			</attribute>
		</annotation>



		<body><![CDATA[
		
	def erg = fglide_exportTopologyData("IDE_CAR_ExportContainer : name = '"+args[1]+"'",
				"true",
				["IDE_CAR_ExportContainer",
				"IDE_CAR_CIDefinitionGroup",
				"IDE_CAR_Dependency",
				"IDE_CI"],null)
	
	
		args[2].withWriter{it << erg}
		return "Data Exported as XML File!!!"

		]]></body>
	</persistable-script>

</foglight-config>

