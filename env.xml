<?xml version="1.0"?>

<project default="FGLDEV.init" basedir=".">

	<echo message="FOGDEV Environment pulling in property files" />
	<property file="project.properties" />
	<property file="localbuild.properties" />

	<!--
		 ###################################################### 
         Some Path definitions useful for compiling and tooling 
		 ######################################################
	-->

	<path id="fgl.ant.classpath">
		<fileset dir="lib/anttask">
			<include name="**/*.jar" />
		</fileset>
	</path>

	<path id="fgl.groovy.classpath">
		<fileset dir="lib/groovy">
			<include name="**/*.jar" />
		</fileset>
	</path>
	<path id="fgl.cmdline.classpath">
		<fileset dir="lib/client">
			<include name="**/*.jar" />
		</fileset>
	</path>


	<!-- 
			###############################
			some taskdefs 
			###############################
	-->
	<taskdef name="car" classname="com.quest.nitro.tools.ant.cartridge.Car" classpathref="fgl.ant.classpath" />

	<!-- Basic Tasks -->
	<target name="FGLDEV.init">
		<echo message="FOGDEV Environment : Global Dev Init called" />
	</target>

	<target name="FGLDEV.clearLib" description="Clears the library paths from old jar files">
		<delete failonerror="true">
			<fileset dir="${fgldev.lib.foglight}" includes="**/*" />
			<fileset dir="${fgldev.lib.spid}" includes="**/*" />
			<fileset dir="${fgldev.lib.wcf}" includes="**/*" />
		</delete>
	</target>

	<target name="FGLDEV.prepareLib" description="Use this target to initialize the lib paths (read the libs from your current installation">
		<delete failonerror="false">
			<fileset dir="${fgldev.lib.foglight}" includes="**/*" />
			<fileset dir="${fgldev.lib.spid}" includes="**/*" />
			<fileset dir="${fgldev.lib.wcf}" includes="**/*" />
		</delete>

		<echo message="Building WCF" />
		<unzip src="${fgldev.server.dir}/${fgldev.console.deploy}" dest="${fgldev.lib.wcf}">
			<patternset>
				<include name="**/wcf-*.jar" />
				<exclude name="**/wcf-core-ressources.jar" />
			</patternset>
		</unzip>
		<delete failonerror="false"> 
			<fileset dir="${fgldev.root}/tmp_war/" includes="console.war"></fileset>
		</delete>
		<mkdir dir="${fgldev.root}/tmp_war/console.war"/>
		<unzip src="${fgldev.server.dir}/${fgldev.console.deploy}" dest="${fgldev.lib.wcf}">
			<patternset>
				<include name="**/wcf-*.jar" />
				<exclude name="**/wcf-core-ressources.jar" />
			</patternset>
		</unzip>

		<unzip src="${fgldev.server.dir}/${fgldev.console.deploy}" dest="${fgldev.root}/tmp_war/console.war">
			<patternset>
				<include name="WEB-INF/classes/**/*" />
			</patternset>
		</unzip>

		<unzip src="${fgldev.server.dir}/server/default/deploy/foglight.sar" dest="${fgldev.lib.wcf}">
			<patternset>
				<include name="**/wcf-*.jar" />
			</patternset>
		</unzip>
		
		<jar destfile="${fgldev.lib.foglight}/fl_console.jar" basedir="${fgldev.root}/tmp_war/console.war/WEB-INF/classes"  >
			<include name="com/quest/nitro/**/*"/>
		</jar>
				
		
		<echo message="Building WCF --fLATTEN" />
		<move todir="${fgldev.lib.wcf}" overwrite="true" verbose="true">
			<fileset dir="${fgldev.lib.wcf}">
				<include name="**/*" />
			</fileset>
		</move>
		<deltree dir="${fgldev.lib.wcf}/WEB-INF" />

		<echo message="Building SPID" />
		<copy todir="${fgldev.lib.spid}" overwrite="true" verbose="true" flatten="true">
			<fileset dir="${fgldev.spid.dir}/spid/${fgldev.spid.version}/lib/">
				<include name="**/*.jar" />
			</fileset>
		</copy>

		<echo message="Building FMS" />
		<copy todir="${fgldev.lib.foglight}" overwrite="true" verbose="true" flatten="true">
			<fileset dir="${fgldev.server.dir}/client">
				<include name="**/*.jar" />
			</fileset>
		</copy>
		<copy tofile="${fgldev.lib.foglight}/foglight_sar.jar" overwrite="true" verbose="true" flatten="true">
			<fileset dir="${fgldev.server.dir}/server/default/deploy/">
				<include name="foglight.sar" />
			</fileset>
		</copy>

		<delete dir="${fgldev.root}/tmp_war/lib" failonerror="false" />
		<mkdir dir="${fgldev.root}/tmp_war/lib" />
		<unjar src="${fgldev.server.dir}/server/default/deploy/foglight.sar" dest="${fgldev.root}/tmp_war/lib">
			<patternset>
				<include name="com/quest/nitro/service/**/*MBean.class" />
				<include name="com/quest/nitro/model/**/*" />
				<include name="com/quest/nitro/util/**/*" />
			</patternset>
		</unjar>
		<jar destfile="${fgldev.lib.foglight}/fl.jar" basedir="${fgldev.root}/tmp_war/lib" includes="**/*" />
		<delete dir="${fgldev.root}/tmp_war/lib" failonerror="false" />

		<copy todir="${fgldev.dtd}">
			<fileset dir="${fgldev.server.dir}/dtd" includes="**/*" />
		</copy>
	</target>

	<target name="FGLDEV.showProperties" description="Show the current Properties">
		<echo message="FGLDEV Properties:" />
		<echo message="################################" />
		<echoproperties prefix="fgldev" />
		<echo message="################################" />
	</target>

	<!-- ##############################
		  Script Taskdefs and Targets 
		 ##############################
	-->

	<taskdef name="groovy"
		classname="org.codehaus.groovy.ant.Groovy" classpathref="fgl.groovy.classpath">
	</taskdef>
	

	
	<macrodef name="exportUI">
		<attribute name="filename" />
		<attribute name="module"  />
		<attribute name="server" />		
		<sequential>
			<echo message="Exporting Mod @{module} for server @{server}" />
			<java jar="${fgldev.server.dir}/client/foglight-cmdline-client.jar" fork="true" failonerror="true">
						<arg line='-usr ${fgldev.usr} -pwd ${fgldev.pwd} -srv @{server} -cmd util:uiexport -f @{filename} -m @{module} ' />
						<classpath path="${fgldev.server.dir}/client">
						</classpath>
			</java>				   
		</sequential>
	</macrodef>
	
	
	<macrodef name="exportRules">
	<attribute name="filename" />
		<attribute name="tmpFile"  />
		<attribute name="scopingQuery"  />
					
	<sequential>
		
		<delete file="@{tmpFile}" failonerror="false"></delete>
		<java jar="${fgldev.server.dir}/client/foglight-cmdline-client.jar" fork="true" failonerror="true">
					<arg line='-usr ${fgldev.usr} -pwd ${fgldev.pwd} -cmd util:configexport -f @{tmpFile}' />
					<classpath path="${fgldev.server.dir}/client">
					</classpath>
		</java>		
		
		<property name="local.tmpFile" value = "@{tmpFile}"/>
		<property name="local.file" value = "@{filename}"/>
		<property name="scopingQuery" value ="@{scopingQuery}"/>
		<groovy><![CDATA[
			import org.dom4j.io.*
			import org.dom4j.*;

			class PruningHandler implements ElementHandler {
			    def messages = []
			    public void onStart(ElementPath path) { }
			    public void onEnd(ElementPath path) {
			 		def car = path.current
			       	
			        car.detach() // prune the tree
			    }
			}
			class RuleHandler implements ElementHandler {
				String _name
				public RuleHandler( String name) {
					_name = name
					println "Setup:"+_name 
				}
			    def messages = []
			    public void onStart(ElementPath path) { }
			    public void onEnd(ElementPath path) {
			 		def car = path.current
					if (car.element("scoping-query") != null && !(car.element("scoping-query").attribute("text") =~ _name)) {	       	
			        car.detach() // prune the tree
					} else if (car.element("scoping-query") == null ){
						car.detach() // prune the tree
					}
			    }
			}

			class DerivationHandler implements ElementHandler {
				String _name
				public DerivationHandler( String name) {
					_name = name
					println "Setup:"+_name 
				}
			    def messages = []
			    public void onStart(ElementPath path) { }
			    public void onEnd(ElementPath path) {
			 		def car = path.current
					if (!(car.attribute("domain-query") =~ _name)) {	       	
			        car.detach() // prune the tree
					} 
			    }
			}

			File f = new File(properties["local.tmpFile"])
			 String content = "";

			 f.withInputStream{ is->
			 	content = is.getText()
		  	 }

			def reader   = new StringReader(content)
 			def reader2  = new SAXReader()
			def handler = new PruningHandler()
			def ruleHandler = new RuleHandler(properties["scopingQuery"])
			def derivationHandler = new DerivationHandler(properties["scopingQuery"])
						
	       
			reader2.addHandler('/foglight-config/persistable-script', handler)
			reader2.addHandler('/foglight-config/persistable-config-model', handler)
			reader2.addHandler('/foglight-config/life-cycle-impl', handler)
			reader2.addHandler('/foglight-config/registry-variable', handler)
			reader2.addHandler('/foglight-config/simple-threshold', handler)
		    reader2.addHandler('/foglight-config/retention-policy-impl', handler)
		 	reader2.addHandler('/foglight-config/named-schedule', handler)
			reader2.addHandler('/foglight-config/scheduled-report', handler)
			
			
			 reader2.addHandler('/foglight-config/severity-family', ruleHandler)
			 reader2.addHandler('/foglight-config/simple-rule', ruleHandler)
			reader2.addHandler('/foglight-config/derivation-definition', derivationHandler)
						
			
			 def records  = reader2.read(reader).rootElement
			 def messages = []

			OutputFormat f2 = new OutputFormat()
			f2.setNewLineAfterDeclaration(true)
			def writer = new StringWriter()
			def w = new XMLWriter(writer,f2).writeNode(records)
			
			org.jdom.Document doc = new org.jdom.input.SAXBuilder(false).build(new StringReader(writer.toString()));
			FileOutputStream out = new FileOutputStream(properties["local.file"]);
			new org.jdom.output.XMLOutputter(org.jdom.output.Format.getPrettyFormat()).output(doc,out);
	
			
			]]>
		</groovy>  
	</sequential>
</macrodef>
	<macrodef name="exportRegistry">
	<attribute name="filenameReg" />
		<attribute name="tmpFile"  />
		<attribute name="scopingQuery"  />
					
	<sequential>
		
		<delete file="@{tmpFile}" failonerror="false"></delete>
		<java jar="${fgldev.server.dir}/client/foglight-cmdline-client.jar" fork="true" failonerror="true">
					<arg line='-usr ${fgldev.usr} -pwd ${fgldev.pwd} -cmd util:configexport -f @{tmpFile}' />
					<classpath path="${fgldev.server.dir}/client">
					</classpath>
		</java>		
		
		<property name="local.tmpFile" value = "@{tmpFile}"/>
		<property name="local.file.reg" value = "@{filenameReg}"/>
		<property name="scopingQueryReg" value ="@{scopingQuery}"/>
		<groovy><![CDATA[
			import org.dom4j.io.*
			import org.dom4j.*;

			class PruningHandler implements ElementHandler {
			    def messages = []
			    public void onStart(ElementPath path) { }
			    public void onEnd(ElementPath path) {
			 		def car = path.current
			       	
			        car.detach() // prune the tree
			    }
			}
			class RegHandler implements ElementHandler {
				String _name
				public RegHandler( String name) {
					_name = name
			println "Setup:" + _name
				}
			    def messages = []
			    public void onStart(ElementPath path) { }
			    public void onEnd(ElementPath path) {
			 		def car = path.current
					if (!(car.attribute("name") =~ _name)) {	       	
			        car.detach() // prune the tree
					} 
			    }
			}

			File f = new File(properties["local.tmpFile"])
			 String content = "";

			 f.withInputStream{ is->
			 	content = is.getText()
		  	 }

			def reader   = new StringReader(content)
 			def reader2  = new SAXReader()
			def handler = new PruningHandler()
			def regHandler = new RegHandler(properties["scopingQueryReg"])
						
	       
			reader2.addHandler('/foglight-config/persistable-script', handler)
			reader2.addHandler('/foglight-config/persistable-config-model', handler)
			reader2.addHandler('/foglight-config/life-cycle-impl', handler)
			reader2.addHandler('/foglight-config/registry-variable', regHandler)
			reader2.addHandler('/foglight-config/simple-threshold', handler)
		    reader2.addHandler('/foglight-config/retention-policy-impl', handler)
		 	reader2.addHandler('/foglight-config/named-schedule', handler)
			reader2.addHandler('/foglight-config/scheduled-report', handler)
			
			
			 reader2.addHandler('/foglight-config/severity-family', handler)
			 reader2.addHandler('/foglight-config/simple-rule', handler)
			reader2.addHandler('/foglight-config/derivation-definition', handler)
						
			
			 def records  = reader2.read(reader).rootElement
			 def messages = []

			OutputFormat f2 = new OutputFormat()
			f2.setNewLineAfterDeclaration(true)
			def writer = new StringWriter()
			def w = new XMLWriter(writer,f2).writeNode(records)
			println "Write to:"+properties["local.file.reg"]

			org.jdom.Document doc = new org.jdom.input.SAXBuilder(false).build(new StringReader(writer.toString()));
			FileOutputStream out = new FileOutputStream(properties["local.file.reg"]);
			new org.jdom.output.XMLOutputter(org.jdom.output.Format.getPrettyFormat()).output(doc,out);
	
			
			]]>
		</groovy>  
	</sequential>
</macrodef>

	<macrodef name="exportASP">
		<attribute name="filenameASP" />
		<attribute name="tmpFile"  />
		<attribute name="agentName"  />
		<attribute name="aspName"  />
								
		<sequential>
			
			<delete file="@{tmpFile}" failonerror="false"></delete>
			<java jar="${fgldev.server.dir}/client/foglight-cmdline-client.jar" fork="true" failonerror="true">
						<arg line='-usr ${fgldev.usr} -pwd ${fgldev.pwd} -cmd util:configexport -f @{tmpFile}' />
						<classpath path="${fgldev.server.dir}/client">
						</classpath>
			</java>		
			
			<property name="local.tmpFile" value = "@{tmpFile}"/>
			<property name="local.file.ASP" value = "@{filenameASP}"/>
			<property name="agentName" value ="@{agentName}"/>
			<property name="aspName" value ="@{aspName}"/>
			<groovy><![CDATA[
				import org.dom4j.io.*
				import org.dom4j.*;

				class PruningHandler implements ElementHandler {
				    def messages = []
				    public void onStart(ElementPath path) { }
				    public void onEnd(ElementPath path) {
				 		def car = path.current
				       	
				        car.detach() // prune the tree
				    }
				}
				class ASPHandler implements ElementHandler {
					String _name
					String _knownName
					public ASPHandler( String agentName, String knownName) {
						_name = agentName
						_knownName = knownName
				println _name +":"+_knownName
					}

					def messages = []
				    
					public void onStart(ElementPath path) { }
				    public void onEnd(ElementPath path) {
				 		def car = path.current
						boolean found = false;
				
						if (car.element("agent_type") != null && (car.element("agent_type").getText() =~ _name)) {
							
							if (car.element("known_name") != null && !(car.element("known_name").getText() =~ _knownName)) {	
								found = true
							}
							
								        
						}
						if (!found) car.detach() // prune the tree
				    }
				}

			
				File f = new File(properties["local.tmpFile"])
				 String content = "";

				 f.withInputStream{ is->
				 	content = is.getText()
			  	 }

				def reader   = new StringReader(content)
	 			def reader2  = new SAXReader()
				def handler = new PruningHandler()
				def configHandler = new ASPHandler(properties["agentName"],properties["aspName"])
				
							
		       
				reader2.addHandler('/foglight-config/persistable-script', handler)
				reader2.addHandler('/foglight-config/life-cycle-impl', handler)
				reader2.addHandler('/foglight-config/registry-variable', handler)
				reader2.addHandler('/foglight-config/simple-threshold', handler)
			    reader2.addHandler('/foglight-config/retention-policy-impl', handler)
			 	reader2.addHandler('/foglight-config/named-schedule', handler)
				reader2.addHandler('/foglight-config/scheduled-report', handler)
				reader2.addHandler('/foglight-config/severity-family', handler)
				reader2.addHandler('/foglight-config/simple-rule', handler)
				reader2.addHandler('/foglight-config/derivation-definition', handler)
							
				reader2.addHandler('/foglight-config/persistable-config-model', configHandler)
				
				 def records  = reader2.read(reader).rootElement
				 def messages = []

				OutputFormat f2 = new OutputFormat()
				f2.setNewLineAfterDeclaration(true)
				def writer = new StringWriter()
				def w = new XMLWriter(writer,f2).writeNode(records)
				
				println "Write to:"+properties["local.file.ASP"]
				org.jdom.Document doc = new org.jdom.input.SAXBuilder(false).build(new StringReader(writer.toString()));
				FileOutputStream out = new FileOutputStream(properties["local.file.ASP"]);
				new org.jdom.output.XMLOutputter(org.jdom.output.Format.getPrettyFormat()).output(doc,out);
		
				
				]]>
			</groovy>  
		</sequential>
	</macrodef>
</project>
